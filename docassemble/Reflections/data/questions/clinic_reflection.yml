---
metadata:
  title: |
    Weekly Clinic Reflection
---
metadata:
  require login: True
---
features:
  labels above fields: True
  bootstrap theme: theme.css
---
include: 
  - docassemble.ALToolbox:goal_satisfy.yml
---
objects:
  - reflection_questions: DADict.using(auto_gather=False, gathered=True)
  - reflection_questions["chat"]: GoalSatisfactionList.using(goals=reflection_goals) #, model="gpt-4o-mini")
---
variable name: reflection_goals
data:
    - What you worked on this week, including any assigned readings.
    - What part of your process worked well for you.
    - What part of your process didn't work as well.
    - Any suggestions or ideas you have for improving your approach next week.
---
template: rubric_explanation
content: |
  In your response, answer the following questions:

  % for goal in reflection_goals:
  - ${ goal }
  % endfor
---
generic object: GoalSatisfactionList
question: |
  % if i == 0:
  Let's go a little deeper
  % else:
  Goal: ${ x[i].goal }
  % endif
subquestion: |
  % if i == 0:
  We want to know more about this reflection goal: ${ x[i].goal }. We'll ask you a few more
  questions to help us understand your reflection better.
  % endif

  ${ collapse_template(x.show_current_progress) }
fields:
  - ${ x[i].question }: x[i].response
    datatype: area
---
mandatory: True
code: |
  questions
  reflection_questions["chat"].gather()
  reflection_questions["feedback"]
  store_record
  thanks_and_download
---
code: |
  store_variables_snapshot(persistent=True, data={
      k: v for k, v in {
          **reflection_questions.elements,
          "user": user_info().email,
          "datetime": current_datetime(),
          reflection_questions["chat"].initial_question: reflection_questions["chat"].initial_draft,
          "follow_up_questions": [
              {question.question: question.response}
              for question in reflection_questions["chat"].elements
          ],
      }.items() if k != "chat"
  })
  store_record = True
---
code: |
  reflection_questions["feedback"] = reflection_questions["chat"].provide_feedback()
---
event: thanks_and_download
question: |
  Thanks for your reflection!
subquestion: |
  You can download a copy of your responses below. Please attach a copy of your reflection to 
  your weekly reflection assignment on Teams.

  Here is some feedback on your reflection:

  ${ reflection_questions["feedback"] }
attachment:
  - filename: weekly_reflection_${ user_info().email }_${current_datetime() }
    allowed formats: 
      - docx
    content: |
      # Weekly Reflection
      Student: ${ bold(user_info().email) }

      ## Reflection question

      ${ reflection_questions["chat"].initial_question }

      % for key, value in reflection_questions.items():
      % if key == "chat":
      ### Your reflection

      &nbsp; | &nbsp;
      ------------ | ------------
      &nbsp; | ${ value.initial_draft }
      % for question in value.complete_elements():
      ${ question.question } | ${ question.response }
      % endfor

      % else:
      
      ### ${ key.replace("_", " ").title() }
    
      ${ value }
      % endif
      % endfor
---
sets: reflection_questions["chat"].initial_question
code: |
  reflection_questions["chat"].initial_question = '''
  Reflect on your growth and learning over the last week. Make
  sure to cover all of the elements in the rubric.
  '''
---
id: first_page
continue button field: questions
question: |
  Weekly reflection
fields:
  - How was last week's class on a scale of 1 to 5?: reflection_questions["class_rating"]
    datatype: range
    min: 1
    max: 5
    step: 1
    default: 5
  - What do you think could be improved? What worked well?: reflection_questions["suggestions"]
    datatype: area
    rows: 3
    required: False
  - note: |
      ---
  - label: |
      ${ reflection_questions["chat"].initial_question }
      
      ${ rubric_explanation }
    field: reflection_questions["chat"].initial_draft
    datatype: area
    rows: 5
    validate: |
      lambda y: (wc := len(y.split(" "))) > 20 or validation_error(f"Write at least 20 words (you wrote { wc }).")
